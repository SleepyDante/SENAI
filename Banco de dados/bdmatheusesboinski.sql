-- MySQL Script generated by MySQL Workbench
-- Tue Feb  4 15:54:29 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`vendedor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vendedor` ;

CREATE TABLE IF NOT EXISTS `mydb`.`vendedor` (
  `cod_vendedor` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar o código do vendedor.',
  `nome_vendedor` VARCHAR(50) NULL COMMENT 'Esse campo é responsável de armazenar o nome do vendedor.',
  `sal_fixo` DECIMAL(15,2) NULL COMMENT 'Esse campo é responsável de armazenar o salário fixo do vendedor.',
  `faixa_comissao` CHAR(2) NULL COMMENT 'Esse campo é responsável de armazenar a faixa de comissão do vendedor.',
  PRIMARY KEY (`cod_vendedor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`cliente` ;

CREATE TABLE IF NOT EXISTS `mydb`.`cliente` (
  `cod_cliente` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar o código do cliente.',
  `nome_cliente` VARCHAR(50) NULL COMMENT 'Esse campo é responsável de armazenar o nome do cliente.',
  `endereco` VARCHAR(50) NULL COMMENT 'Esse campo é responsável de armazenar o endereço do cliente.',
  `cidade` VARCHAR(50) NULL COMMENT 'Esse campo é responsável de armazenar a cidade do cliente.',
  `cep` VARCHAR(10) NULL COMMENT 'Esse campo é responsável de armazenar o CEP do cliente.',
  `uf` CHAR(2) NULL COMMENT 'Esse campo é responsável de armazenar a unidade federal do cliente.',
  `cnpj` VARCHAR(30) NULL COMMENT 'Esse campo é responsável de armazenar o CNPJ do cliente.',
  `ie` INT(10) NULL COMMENT 'Esse campo é responsável de armazenar a inscrição estadual do cliente.',
  PRIMARY KEY (`cod_cliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`pedido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`pedido` ;

CREATE TABLE IF NOT EXISTS `mydb`.`pedido` (
  `num_pedido` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar o número do pedido.',
  `prazo_entrega` INT(10) NULL COMMENT 'Esse campo é responsável de armazenar o prazo da entrega.',
  `cod_vendedor` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar o código do vendedor.',
  `vendedor_cod_vendedor` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar a chave estrangeira da tabela vendedor.',
  `cliente_cod_cliente` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar a chave estrangeira da tabela cliente.',
  PRIMARY KEY (`num_pedido`, `vendedor_cod_vendedor`, `cliente_cod_cliente`),
  INDEX `fk_pedido_vendedor1_idx` (`vendedor_cod_vendedor` ASC) VISIBLE,
  INDEX `fk_pedido_cliente1_idx` (`cliente_cod_cliente` ASC) VISIBLE,
  CONSTRAINT `fk_pedido_vendedor1`
    FOREIGN KEY (`vendedor_cod_vendedor`)
    REFERENCES `mydb`.`vendedor` (`cod_vendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_cliente1`
    FOREIGN KEY (`cliente_cod_cliente`)
    REFERENCES `mydb`.`cliente` (`cod_cliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`produto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`produto` ;

CREATE TABLE IF NOT EXISTS `mydb`.`produto` (
  `cod_produto` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar o código do produto.',
  `unid_produto` VARCHAR(10) NULL COMMENT 'Esse campo é responsável de armazenar a unidade de medida do produto.',
  `desc_produto` VARCHAR(50) NULL COMMENT 'Esse campo é responsável de armazenar a descrição do produto.',
  `valor_unit` DECIMAL(15,2) NULL COMMENT 'Esse campo é responsável de armazenar o valor unitário do produto.',
  PRIMARY KEY (`cod_produto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`item_de_pedido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`item_de_pedido` ;

CREATE TABLE IF NOT EXISTS `mydb`.`item_de_pedido` (
  `pedido_num_pedido` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar a chave estrangeira da tabela pedido.',
  `produto_cod_produto` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar a chave estrangeira da tabela produto.',
  `qntd` INT NOT NULL COMMENT 'Esse campo é responsável de armazenar a quantidade de produtos no pedido.',
  PRIMARY KEY (`pedido_num_pedido`, `produto_cod_produto`),
  INDEX `fk_pedido_has_produto_produto1_idx` (`produto_cod_produto` ASC) VISIBLE,
  INDEX `fk_pedido_has_produto_pedido_idx` (`pedido_num_pedido` ASC) VISIBLE,
  CONSTRAINT `fk_pedido_has_produto_pedido`
    FOREIGN KEY (`pedido_num_pedido`)
    REFERENCES `mydb`.`pedido` (`num_pedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_has_produto_produto1`
    FOREIGN KEY (`produto_cod_produto`)
    REFERENCES `mydb`.`produto` (`cod_produto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
